
#include <iostream>
#include <bits/stdc++.h>
#define fastio() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie()
#define endl '\n'
#define pb push_back
#define popb pop_back
#define loopi(n) for(int i=0;i<(n);i++)
#define loopj(n) for(int j=0;j<(n);j++)
#define loopk(n) for(int k=0;k<(n);k++)
#define loopie(n) for(int i=0;i<=(n);i++)
#define loopje(n) for(int j=0;j<=(n);j++)
#define loopke(n) for(int k=0;k<=(n);k++)
#define lpi(a,b,c) for(int i=a;i<(b);i+=c)
#define lpj(a,b,c) for(int j=a;j<(b);j+=c)
#define lpk(a,b,c) for(int k=a;k<(b);k+=c)
#define lpie(a,b,c) for(int i=a;i<=(b);i+=c)
#define lpje(a,b,c) for(int j=a;j<=(b);j+=c)
#define cin(v) for(auto& i:v)cin>>i;
#define cout(v) for(auto& i:v)cout<<i;
#define all(obj) obj.begin(),obj.end()
#define minobj(v) *min_element(all(v));
#define maxobj(v) *max_element(all(v));
#define clr(x,val) memset(x,val,sizeof(x));

using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pi;
typedef vector<pair<int,int> > vpi;
typedef map<ll,ll> ml;
typedef map<int,int> mi;
typedef priority_queue<int> pqi;
typedef priority_queue<int, vi, greater<int>> pqiMin;
typedef pair<string, vl> plv;
 
 
void File(){
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
}

class Node {
public:
    int key;
    Node* left;
    Node* right;

    Node(int value) {
        key = value;
        left = right = nullptr;
    }
};

class BST {
private:
    Node* root;

    Node* insert(Node* node, int key) {
        if (node == nullptr) {
            return new Node(key);
        }
        if (key < node->key) {
            node->left = insert(node->left, key);
        } else if (key > node->key) {
            node->right = insert(node->right, key);
        }

        return node;
    }

    void inorderTraversal(Node* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            cout << node->key << " ";
            inorderTraversal(node->right);
        }
    }

public:
    BST() {
        root = nullptr;
    }

    void insert(int key) {
        root = insert(root, key);
    }

    void inorderTraversal() {
        inorderTraversal(root);
        cout << endl;
    }
};

// set<int,bool(*)(int,int)> s(preceed);
const auto next_int = [](){ int num; cin >> num; return num; };
int solve(){ 
    BST bst;
    for(auto i=next_int();i--;){
        bst.insert(next_int());
    }
    bst.inorderTraversal();
    return 0;
}

int main() {
    fastio();
    File();
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    int32_t t=1;
    // cin>>t;
    for(auto i=t;i--;){
        solve();
    }
}


/*********INPUT************/
// 7
// 50
// 30
// 70
// 20
// 40
// 60
// 80




